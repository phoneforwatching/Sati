# -*- coding: utf-8 -*-

"""
Sati App ‚Äî Telegram Bot
Version: v5.1 (No Letting-Go + Short Gemini)

Changes:
- Remove Letting-Go from UI, storage, summaries
- Gemini via google-genai Client; short, concise response to avoid errors
"""

import os
from pathlib import Path
import csv
import json
import shutil
import tempfile
import statistics
import datetime as dt
import time
from typing import Dict, Any, List, Tuple
from zoneinfo import ZoneInfo
from collections import Counter

from dotenv import load_dotenv
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.background import BackgroundScheduler

# ===== Gemini (per Quickstart) =====
GENAI_OK = True
try:
    from google import genai   # pip install google-genai
except Exception:
    GENAI_OK = False

# ---------- CONFIG ----------
# Load .env preferentially from the script directory so running the script
# from another CWD still picks up the project's .env file.
SCRIPT_DIR = Path(__file__).resolve().parent
dotenv_path = SCRIPT_DIR / ".env"
if dotenv_path.exists():
    load_dotenv(dotenv_path=str(dotenv_path))
else:
    # try to find a .env file (search upwards)
    try:
        from dotenv import find_dotenv
        found = find_dotenv()
    except Exception:
        found = ""
    if found:
        load_dotenv(found)
    else:
        # fallback to default behavior (may load from current working dir)
        load_dotenv()

def _mask_token(t: str) -> str:
    if not t:
        return ""
    # show only first 4 and last 4 chars
    if len(t) <= 10:
        return "*" * len(t)
    return t[:4] + "..." + t[-4:]


# Load BOT_TOKEN securely: order of precedence
# 
# 
# ) BOT_TOKEN env
# 2) BOT_TOKEN_FILE env -> read file contents
# 3) interactive prompt (getpass) if running in a tty
import sys, getpass
BOT_TOKEN = os.getenv("BOT_TOKEN")
# Optionally allow running without Telegram for local/dev testing
SKIP_TELEGRAM = bool(os.getenv("SKIP_TELEGRAM"))  # set to any non-empty value to skip Telegram API calls

print(f"Bot token: {BOT_TOKEN}")

_env_csv = os.getenv("CSV_PATH")
if _env_csv:
    _p = Path(_env_csv)
    CSV_PATH = str(_p if _p.is_absolute() else SCRIPT_DIR.joinpath(_p))
else:
    CSV_PATH = str(SCRIPT_DIR / "sati_logs.csv")
SUBS_PATH = os.getenv("SUBS_PATH", "subscribers.json")
CHAT_ID_DEFAULT = os.getenv("CHAT_ID")  # optional start notice
TZ_NAME = os.getenv("TZ", "Asia/Bangkok")
TZ = ZoneInfo(TZ_NAME)

# Gemini
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_MODEL = os.getenv("GEMINI_MODEL", "gemini-2.0-flash")  # ‡πÉ‡∏ä‡πâ‡∏£‡∏∏‡πà‡∏ô flash ‡∏ï‡∏≤‡∏° docs
GENAI_CLIENT = None
if GENAI_OK and GEMINI_API_KEY:
    try:
        GENAI_CLIENT = genai.Client(api_key=GEMINI_API_KEY)
    except Exception:
        GENAI_CLIENT = None

CANCEL_TEXT = "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
TAGS: List[str] = ["‡∏á‡∏≤‡∏ô", "‡∏Ñ‡∏ô‡∏£‡∏±‡∏Å", "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß", "‡πÄ‡∏á‡∏¥‡∏ô", "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", "‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]

# CSV schema (‡πÑ‡∏°‡πà‡∏°‡∏µ letting_go ‡πÅ‡∏•‡πâ‡∏ß)
CSV_FIELDS = [
    "timestamp_iso", "user_id", "username",
    "chat_id",
    "tag",
    "event_desc",
    "dissatisfaction_score", "dissatisfaction_reason",
    "reaction_desc", "reaction_score", "reaction_reason"
]

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
STATE: Dict[int, Dict[str, Any]] = {}

# ---------- Utils ----------
def now_local() -> dt.datetime:
    return dt.datetime.now(TZ)

def username_from(x) -> str:
    u = x.from_user
    if getattr(u, "username", None):
        return f"@{u.username}"
    name = (u.first_name or "") + (" " + u.last_name if getattr(u, "last_name", None) else "")
    return name.strip() or str(u.id)

def cancel_flow(m_or_c):
    uid = m_or_c.from_user.id
    STATE.pop(uid, None)
    if hasattr(m_or_c, "message"):  # callback
        bot.edit_message_text("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‚úÖ",
                              chat_id=m_or_c.message.chat.id,
                              message_id=m_or_c.message.message_id)
    else:
        bot.send_message(m_or_c.chat.id, "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‚úÖ", reply_markup=ReplyKeyboardRemove())

# ---------- CSV helpers ----------
def init_csv_if_needed():
    global CSV_PATH
    csvp = Path(CSV_PATH)
    try:
        if not csvp.exists():
            csvp.parent.mkdir(parents=True, exist_ok=True)
            with open(csvp, "w", newline="", encoding="utf-8") as f:
                csv.writer(f).writerow(CSV_FIELDS)
        return
    except OSError:
        # Try fallbacks: user's home, then /tmp
        fallbacks = [Path.home() / "sati_logs.csv", Path("/tmp") / f"sati_logs_{os.getpid()}.csv"]
        for cand in fallbacks:
            try:
                cand.parent.mkdir(parents=True, exist_ok=True)
                with open(cand, "w", newline="", encoding="utf-8") as f:
                    csv.writer(f).writerow(CSV_FIELDS)
                CSV_PATH = str(cand)
                print(f"CSV path fallback in use: {CSV_PATH}")
                return
            except OSError:
                continue
        # re-raise if no fallback worked
        raise

def migrate_csv_strip_letting_go_if_needed():
    """‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏°‡∏µ letting_go_score -> ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤ schema ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏ó‡∏¥‡πâ‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏±‡πâ‡∏ô"""
    if not os.path.exists(CSV_PATH):
        return
    with open(CSV_PATH, "r", encoding="utf-8") as f:
        rows = list(csv.reader(f))
    if not rows:
        with open(CSV_PATH, "w", newline="", encoding="utf-8") as f:
            csv.writer(f).writerow(CSV_FIELDS)
        return
    header = rows[0]
    # ‡∏ñ‡πâ‡∏≤ header ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    if header == CSV_FIELDS:
        return
    # map ‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ (ignore letting_go_score)
    idx = {h: i for i, h in enumerate(header)}
    tmp = tempfile.NamedTemporaryFile("w", delete=False, newline="", encoding="utf-8")
    with tmp as tf:
        w = csv.writer(tf)
        w.writerow(CSV_FIELDS)
        for r in rows[1:]:
            def val(k, default=""):
                j = idx.get(k)
                return r[j] if j is not None and j < len(r) else default
            w.writerow([
                val("timestamp_iso"), val("user_id"), val("username"),
                val("chat_id"),
                val("tag"),
                val("event_desc"),
                val("dissatisfaction_score"), val("dissatisfaction_reason"),
                val("reaction_desc"), val("reaction_score"), val("reaction_reason")
            ])
    shutil.move(tmp.name, CSV_PATH)

def ensure_csv_ready():
    init_csv_if_needed()
    migrate_csv_strip_letting_go_if_needed()

def save_row(row: Dict[str, Any]):
    ensure_csv_ready()
    with open(CSV_PATH, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        w.writerow([
            row.get("timestamp_iso",""), row.get("user_id",""), row.get("username",""),
            row.get("chat_id",""),
            row.get("tag",""),
            row.get("event_desc",""),
            row.get("dissatisfaction_score",0), row.get("dissatisfaction_reason",""),
            row.get("reaction_desc",""), row.get("reaction_score",0), row.get("reaction_reason","")
        ])

def load_rows() -> List[Dict[str, str]]:
    ensure_csv_ready()
    with open(CSV_PATH, "r", encoding="utf-8") as f:
        return list(csv.DictReader(f))

def load_last_row_for_user(uid_str: str):
    last = None
    for row in load_rows():
        if row.get("user_id") == uid_str:
            last = row
    return last

def delete_last_row_for_user(uid_str: str):
    rows = load_rows()
    target_idx = None
    for i in range(len(rows)-1, -1, -1):
        if rows[i].get("user_id") == uid_str:
            target_idx = i
            break
    if target_idx is None:
        return None
    removed = rows.pop(target_idx)
    tmp = tempfile.NamedTemporaryFile("w", delete=False, encoding="utf-8", newline="")
    with tmp as tf:
        w = csv.DictWriter(tf, fieldnames=CSV_FIELDS)
        w.writeheader()
        for row in rows:
            for k in CSV_FIELDS:
                row.setdefault(k, "")
            w.writerow(row)
    shutil.move(tmp.name, CSV_PATH)
    return removed

# ---------- Subscribers ----------
def load_subs() -> List[int]:
    if not os.path.exists(SUBS_PATH):
        return []
    try:
        with open(SUBS_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
        if isinstance(data, list):
            return [int(x) for x in data]
    except Exception:
        pass
    return []

def save_subs(subs: List[int]):
    with open(SUBS_PATH, "w", encoding="utf-8") as f:
        json.dump(subs, f)

# ---------- Keyboards ----------
def kb_tags() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(*[InlineKeyboardButton(t, callback_data=f"tag:{t}") for t in TAGS])
    kb.add(InlineKeyboardButton("üîÅ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", callback_data="use_last"))
    kb.add(InlineKeyboardButton("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", callback_data="cancel"))
    return kb

def kb_score_inline(kind: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=5)
    buttons = [InlineKeyboardButton(str(i), callback_data=f"{kind}:{i}") for i in range(1, 11)]
    kb.add(*buttons[:5]); kb.add(*buttons[5:])
    kb.add(InlineKeyboardButton("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", callback_data="cancel"))
    return kb

def kb_confirm_inline() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚¨ÖÔ∏è ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", callback_data="back"),
        InlineKeyboardButton("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", callback_data="confirm")
    )
    kb.add(InlineKeyboardButton("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", callback_data="cancel"))
    return kb

def main_reply_kb():
    """Reply keyboard ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î‡πÑ‡∏î‡πâ‡∏™‡∏∞‡∏î‡∏ß‡∏Å"""
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("/log"), KeyboardButton("/meditation"), KeyboardButton("/today"))
    kb.row(KeyboardButton("/meds_today"), KeyboardButton("/export"), KeyboardButton("/undo"))
    kb.row(KeyboardButton("/subscribe_daily"), KeyboardButton("/unsubscribe"))
    return kb

# ---------- Gemini reflection (SHORT) ----------
def gemini_reflection(event: str,
                      diss_score: int, diss_reason: str,
                      react_desc: str, react_score: int) -> str:
    """
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡∏°‡∏≤‡∏Å (retry) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏∞‡πÉ‡∏ä‡πâ fallback local response
    """
    def fallback():
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
        return (
            "(AI) ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini ‡πÑ‡∏î‡πâ ‚Äî ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á:\n"
            "‡∏´‡∏•‡∏±‡∏Å‡∏ò‡∏£‡∏£‡∏°: ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á, ‡∏•‡∏î‡∏≠‡∏ß‡∏¥‡∏ä‡∏ä‡∏≤/‡∏≠‡∏∏‡∏õ‡∏ó‡∏≤‡∏ô\n"
            "‡πÅ‡∏ô‡∏ß‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥:\n"
            "‚Ä¢ ‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡∏¢‡∏≤‡∏ß ‡πÜ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô\n"
            "‚Ä¢ ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ\n"
            "‚Ä¢ ‡∏à‡∏î‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ 1 ‡∏Ç‡πâ‡∏≠"
        )

    if GENAI_CLIENT is None:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Gemini client ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ fallback local response ‡πÅ‡∏ó‡∏ô (‡πÑ‡∏°‡πà‡∏Ç‡πâ‡∏≤‡∏°)
        # ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API
        return fallback()

    prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏û‡∏£‡∏∞‡∏û‡∏∏‡∏ó‡∏ò‡πÄ‡∏à‡πâ‡∏≤‡πÉ‡∏ô‡∏û‡∏£‡∏∞‡πÑ‡∏ï‡∏£‡∏õ‡∏¥‡∏é‡∏Å (‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏≥‡∏ô‡∏ß‡∏ô/‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î)
‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: {event}
‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à: {diss_score}/10 ‚Äî {diss_reason}
‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤: {react_score}/10 ‚Äî {react_desc}

‡∏à‡∏á‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡∏°‡∏≤‡∏Å:
‚Ä¢ ‡∏≠‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ò‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (1‚Äì2 ‡∏Ç‡πâ‡∏≠)
‚Ä¢ ‡πÅ‡∏ô‡∏∞‡πÅ‡∏ô‡∏ß‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö‡∏•‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 bullets)
‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏ß‡∏° ‚â§ 80 ‡∏Ñ‡∏≥
‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
""".strip()

    # retry small number of times on transient errors (e.g., 503 overloaded)
    attempts = 3
    for attempt in range(attempts):
        try:
            resp = GENAI_CLIENT.models.generate_content(
                model=GEMINI_MODEL,
                contents=prompt,
            )
            text = (getattr(resp, "text", None) or "").strip()
            if text:
                return text
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ empty text ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ fallback
            return fallback()
        except Exception as e:
            msg = str(e) or ""
            # ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô overload ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡πÅ‡∏•‡πâ‡∏ß retry
            if attempt < attempts - 1 and ("503" in msg or "UNAVAILABLE" in msg or "overloaded" in msg.lower()):
                time.sleep(1 + attempt * 2)
                continue
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏±‡πâ‡∏ô) ‡πÅ‡∏•‡∏∞ fallback
            try:
                return f"(AI) ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini: {e}\n\n" + fallback()
            except Exception:
                return fallback()
    return fallback()

# ---------- Help ----------
@bot.message_handler(commands=["start", "help"])
def handle_help(m):
    text = (
        "üßò‚Äç‚ôÇÔ∏è <b>Sati App (v5.1)</b>\n\n"
        "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:\n"
        "‚Ä¢ <b>/log</b> ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡πÅ‡∏ó‡πá‡∏Å ‚Üí ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå ‚Üí ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‚Üí ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô)\n"
        "‚Ä¢ <b>/meditation</b> ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏°‡∏≤‡∏ò‡∏¥ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏)\n"
        "‚Ä¢ <b>/meds_today</b> ‡∏´‡∏£‡∏∑‡∏≠ <b>/med_summarize</b> ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏°‡∏≤‡∏ò‡∏¥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n"
        "‚Ä¢ <b>/today</b> ‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n"
        "‚Ä¢ <b>/weekly</b> ‡∏™‡∏£‡∏∏‡∏õ 7 ‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á\n"
        "‚Ä¢ <b>/monthly</b> ‡∏™‡∏£‡∏∏‡∏õ 30 ‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á\n"
        "‚Ä¢ <b>/subscribe_daily</b> ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ 21:00\n"
        "‚Ä¢ <b>/unsubscribe</b> ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n"
        "‚Ä¢ <b>/undo</b> ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô\n"
        "‚Ä¢ <b>/export</b> ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n"
        "‚Ä¢ <b>/export_meds</b> ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ meditations.csv\n\n"
        "<b>‡∏™‡πÄ‡∏Å‡∏•</b>\n"
        "‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à: 1 = ‡πÅ‡∏ó‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô | 10 = ‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à‡∏°‡∏≤‡∏Å\n"
        "‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á React: 10 = ‡∏™‡∏á‡∏ö‡∏°‡∏≤‡∏Å | 1 = ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á/‡∏Ç‡∏≤‡∏î‡∏™‡∏ï‡∏¥\n\n"
        "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢"
    )
    bot.send_message(m.chat.id, text, reply_markup=main_reply_kb())

# ---------- Log Flow ----------
# steps: tag -> event_desc -> diss_score -> diss_reason -> react_desc -> react_score -> react_reason -> confirm

@bot.message_handler(commands=["log"])
def start_log(m):
    ensure_csv_ready()
    uid = m.from_user.id
    STATE[uid] = {"step": "tag"}
    bot.send_message(
        m.chat.id,
        "üîñ <b>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå</b>\n(‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå pattern ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)",
        reply_markup=kb_tags()
    )

@bot.callback_query_handler(func=lambda c: c.data in ("use_last", "cancel") or c.data.startswith("tag:"))
def on_tag_or_use_last(c):
    uid = c.from_user.id
    if c.data == "cancel":
        return cancel_flow(c)

    if c.data == "use_last":
        last = load_last_row_for_user(str(uid))
        if not last:
            return bot.edit_message_text("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏Å‡πà‡∏≤ ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ó‡πá‡∏Å",
                                         chat_id=c.message.chat.id,
                                         message_id=c.message.message_id,
                                         reply_markup=kb_tags())
        STATE[uid] = {
            "step": "diss_score",
            "tag": last.get("tag",""),
            "event_desc": last.get("event_desc","")
        }
        return bot.edit_message_text(
            text=(
                f"‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏î‡∏¥‡∏° ‚úÖ\n‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å: {STATE[uid]['tag'] or '-'}\n"
                f"‚Ä¢ ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: {STATE[uid]['event_desc'] or '-'}\n\n"
                "‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô <b>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à</b> (1‚Äì10)\n1 = ‡πÅ‡∏ó‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô | 10 = ‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à‡∏°‡∏≤‡∏Å"
            ),
            chat_id=c.message.chat.id,
            message_id=c.message.message_id,
            reply_markup=kb_score_inline("diss")
        )

    tag = c.data.split(":", 1)[1]
    STATE[uid] = {"step": "event_desc", "tag": tag}
    bot.edit_message_text(
        f"‡πÅ‡∏ó‡πá‡∏Å: {tag} ‚úÖ\n\n‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö",
        chat_id=c.message.chat.id,
        message_id=c.message.message_id
    )

@bot.message_handler(func=lambda msg: STATE.get(msg.from_user.id,{}).get("step") == "event_desc", content_types=["text"])
def step_event_desc(m):
    if m.text.strip() == CANCEL_TEXT:
        return cancel_flow(m)
    uid = m.from_user.id
    STATE[uid]["event_desc"] = m.text.strip()
    STATE[uid]["step"] = "diss_score"
    bot.send_message(
        m.chat.id,
        "‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô <b>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à</b> (1‚Äì10)\n1 = ‡πÅ‡∏ó‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô | 10 = ‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à‡∏°‡∏≤‡∏Å",
        reply_markup=kb_score_inline("diss")
    )

@bot.callback_query_handler(func=lambda c: c.data.startswith(("diss:", "react:")) or c.data == "cancel")
def on_score_callback(c):
    uid = c.from_user.id
    if c.data == "cancel":
        return cancel_flow(c)

    kind, val = c.data.split(":")
    val = int(val)
    if kind == "diss":
        STATE.setdefault(uid, {})
        STATE[uid]["dissatisfaction_score"] = val
        STATE[uid]["step"] = "diss_reason"
        bot.edit_message_text(f"‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à: {val}/10 ‚úÖ",
                              chat_id=c.message.chat.id,
                              message_id=c.message.message_id)
        bot.send_message(c.message.chat.id, "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à (‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏±‡πâ‡∏ô ‡πÜ)")

    elif kind == "react":
        STATE.setdefault(uid, {})
        STATE[uid]["reaction_score"] = val
        STATE[uid]["step"] = "react_reason"
        bot.edit_message_text(f"React (10=‡∏™‡∏á‡∏ö, 1=‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á): {val}/10 ‚úÖ",
                              chat_id=c.message.chat.id,
                              message_id=c.message.message_id)
        bot.send_message(c.message.chat.id, "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ React (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏û‡∏¥‡∏°‡∏û‡πå - ‡πÑ‡∏î‡πâ)")

@bot.message_handler(func=lambda msg: STATE.get(msg.from_user.id,{}).get("step") == "diss_reason", content_types=["text"])
def step_diss_reason(m):
    if m.text.strip() == CANCEL_TEXT:
        return cancel_flow(m)
    uid = m.from_user.id
    STATE[uid]["dissatisfaction_reason"] = m.text.strip()
    STATE[uid]["step"] = "react_desc"
    bot.send_message(m.chat.id, "‡∏ï‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£? (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏•‡∏±‡∏ö, ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö, ‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å ‡∏Ø‡∏•‡∏Ø)")

@bot.message_handler(func=lambda msg: STATE.get(msg.from_user.id,{}).get("step") == "react_desc", content_types=["text"])
def step_react_desc(m):
    if m.text.strip() == CANCEL_TEXT:
        return cancel_flow(m)
    uid = m.from_user.id
    STATE[uid]["reaction_desc"] = m.text.strip()
    STATE[uid]["step"] = "react_score"
    bot.send_message(
        m.chat.id,
        "‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô <b>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ React</b> (1‚Äì10)\n10 = ‡∏™‡∏á‡∏ö‡∏°‡∏≤‡∏Å | 1 = ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á/‡∏Ç‡∏≤‡∏î‡∏™‡∏ï‡∏¥",
        reply_markup=kb_score_inline("react")
    )

@bot.message_handler(func=lambda msg: STATE.get(msg.from_user.id,{}).get("step") == "react_reason", content_types=["text"])
def step_react_reason(m):
    if m.text.strip() == CANCEL_TEXT:
        return cancel_flow(m)
    uid = m.from_user.id
    STATE[uid]["reaction_reason"] = m.text.strip()

    data = STATE.get(uid, {})

    preview = (
        "üîé <b>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</b>\n"
        f"‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å: {data.get('tag','-')}\n"
        f"‚Ä¢ ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: {data.get('event_desc','-')}\n"
        f"‚Ä¢ ‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à: {data.get('dissatisfaction_score','-')}/10 ‚Äî {data.get('dissatisfaction_reason','-')}\n"
        f"‚Ä¢ React: {data.get('reaction_score','-')}/10 ‚Äî {data.get('reaction_desc','-')} ({data.get('reaction_reason','-')})\n\n"
        "‡∏Å‡∏î <b>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</b> ‡∏´‡∏£‡∏∑‡∏≠ <b>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</b> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô React"
    )
    STATE[uid]["step"] = "confirm"
    bot.send_message(m.chat.id, preview, reply_markup=kb_confirm_inline())

@bot.callback_query_handler(func=lambda c: c.data in ("back", "confirm"))
def on_confirm_flow(c):
    uid = c.from_user.id
    data = STATE.get(uid, {})

    if c.data == "back":
        STATE[uid]["step"] = "react_score"
        return bot.edit_message_text(
            "‡πÅ‡∏Å‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô <b>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ React</b> (1‚Äì10)\n10 = ‡∏™‡∏á‡∏ö‡∏°‡∏≤‡∏Å | 1 = ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á/‡∏Ç‡∏≤‡∏î‡∏™‡∏ï‡∏¥",
            chat_id=c.message.chat.id,
            message_id=c.message.message_id,
            reply_markup=kb_score_inline("react")
        )

    if c.data == "confirm":
        row = {
            "timestamp_iso": now_local().isoformat(timespec="seconds"),
            "user_id": uid,
            "username": username_from(c),
            "chat_id": c.message.chat.id,
            "tag": data.get("tag",""),
            "event_desc": data.get("event_desc",""),
            "dissatisfaction_score": data.get("dissatisfaction_score", 0),
            "dissatisfaction_reason": data.get("dissatisfaction_reason",""),
            "reaction_desc": data.get("reaction_desc",""),
            "reaction_score": data.get("reaction_score", 0),
            "reaction_reason": data.get("reaction_reason","")
        }
        save_row(row)

        bot.edit_message_text("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ",
                              chat_id=c.message.chat.id,
                              message_id=c.message.message_id)
        bot.send_message(
            c.message.chat.id,
            "‚úÖ <b>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</b>\n"
            f"‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å: {row['tag'] or '-'}\n"
            f"‚Ä¢ ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: {row['event_desc']}\n"
            f"‚Ä¢ ‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à: {row['dissatisfaction_score']}/10 ‚Äî {row['dissatisfaction_reason']}\n"
            f"‚Ä¢ React: {row['reaction_score']}/10 ‚Äî {row['reaction_desc']} ({row['reaction_reason']})"
        )

        # Gemini: ‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô‡∏°‡∏≤‡∏Å (UI-friendly + ‡πÄ‡∏Å‡πá‡∏ö state)
        input_for_ai = {
            "event": row["event_desc"],
            "diss_score": int(row["dissatisfaction_score"]),
            "diss_reason": row["dissatisfaction_reason"],
            "react_desc": row["reaction_desc"],
            "react_score": int(row["reaction_score"])
        }
        advice = gemini_reflection(
            event=input_for_ai["event"],
            diss_score=input_for_ai["diss_score"],
            diss_reason=input_for_ai["diss_reason"],
            react_desc=input_for_ai["react_desc"],
            react_score=input_for_ai["react_score"]
        )

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° "‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà / ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≠‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô STATE (‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• flow ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠)
        STATE[uid] = {
            "last_reflection_input": input_for_ai,
            "last_reflection_text": advice
        }

        ui = format_reflection_ui(advice)
        try:
            bot.send_message(c.message.chat.id, ui, reply_markup=kb_reflection_actions())
        except Exception:
            # fallback: ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á UI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏¥‡∏ö‡πÅ‡∏ó‡∏ô
            bot.send_message(c.message.chat.id, f"üßò‚Äç‚ôÇÔ∏è <b>‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå</b>\n{advice}")

        # ‡πÑ‡∏°‡πà‡∏•‡∏ö STATE ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ callback handlers ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        # ...existing code...

# ---------- /undo ----------
@bot.message_handler(commands=["undo"])
def handle_undo(m):
    ensure_csv_ready()
    uid = str(m.from_user.id)
    removed = delete_last_row_for_user(uid)
    if not removed:
        return bot.reply_to(m, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö")
    bot.reply_to(m, (
        "‚Ü©Ô∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö\n"
        f"‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å: {removed.get('tag','-')}\n"
        f"‚Ä¢ ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: {removed.get('event_desc','-')}\n"
        f"‚Ä¢ ‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à: {removed.get('dissatisfaction_score','-')}/10\n"
        f"‚Ä¢ React: {removed.get('reaction_score','-')}/10"
    ))

# ---------- Meditation CSV & helpers ----------
_env_med_csv = os.getenv("MEDITATION_CSV_PATH")
if _env_med_csv:
    _mp = Path(_env_med_csv)
    MEDITATION_CSV_PATH = str(_mp if _mp.is_absolute() else SCRIPT_DIR.joinpath(_mp))
else:
    MEDITATION_CSV_PATH = str(SCRIPT_DIR / "meditations.csv")
MED_CSV_FIELDS = ["timestamp_iso", "user_id", "username", "chat_id", "duration_min", "type", "note"]

def init_med_csv_if_needed():
    global MEDITATION_CSV_PATH
    medp = Path(MEDITATION_CSV_PATH)
    try:
        if not medp.exists():
            medp.parent.mkdir(parents=True, exist_ok=True)
            with open(medp, "w", newline="", encoding="utf-8") as f:
                csv.writer(f).writerow(MED_CSV_FIELDS)
        return
    except OSError:
        fallbacks = [Path.home() / "meditations.csv", Path("/tmp") / f"meditations_{os.getpid()}.csv"]
        for cand in fallbacks:
            try:
                cand.parent.mkdir(parents=True, exist_ok=True)
                with open(cand, "w", newline="", encoding="utf-8") as f:
                    csv.writer(f).writerow(MED_CSV_FIELDS)
                MEDITATION_CSV_PATH = str(cand)
                print(f"Meditation CSV path fallback in use: {MEDITATION_CSV_PATH}")
                return
            except OSError:
                continue
        raise

def ensure_med_csv_ready():
    init_med_csv_if_needed()

def save_med_row(row: Dict[str, Any]):
    ensure_med_csv_ready()
    with open(MEDITATION_CSV_PATH, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        w.writerow([
            row.get("timestamp_iso",""), row.get("user_id",""), row.get("username",""),
            row.get("chat_id",""),
            row.get("duration_min", 0), row.get("type",""), row.get("note","")
        ])

def load_med_rows() -> List[Dict[str, str]]:
    ensure_med_csv_ready()
    with open(MEDITATION_CSV_PATH, "r", encoding="utf-8") as f:
        return list(csv.DictReader(f))

def med_rows_for_chat_between(chat_id: int, start: dt.date, end_inclusive: dt.date) -> List[Dict[str,str]]:
    res = []
    for row in load_med_rows():
        if str(chat_id) != row.get("chat_id", ""):
            continue
        try:
            ts = dt.datetime.fromisoformat(row.get("timestamp_iso",""))
        except Exception:
            continue
        d = ts.date()
        if start <= d <= end_inclusive:
            res.append(row)
    return res

def summarize_meds_today(chat_id: int) -> str:
    today = now_local().date()
    rows = med_rows_for_chat_between(chat_id, today, today)
    if not rows:
        return f"üßò‚Äç‚ôÇÔ∏è <b>‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏°‡∏≤‡∏ò‡∏¥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</b> ({today.isoformat()})\n‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏°‡∏≤‡∏ò‡∏¥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö"
    total = 0
    durations = []
    for r in rows:
        try:
            dur = int(r.get("duration_min", 0))
        except Exception:
            dur = 0
        durations.append(dur)
        total += dur
    avg = (total / len(durations)) if durations else 0
    return (
        f"üßò‚Äç‚ôÇÔ∏è <b>‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏°‡∏≤‡∏ò‡∏¥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</b> ({today.isoformat()})\n"
        f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á: {len(durations)}\n"
        f"‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤: {total} ‡∏ô‡∏≤‡∏ó‡∏µ\n"
        f"‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á: {avg:.1f} ‡∏ô‡∏≤‡∏ó‡∏µ"
    )

# ---------- Keyboards for meditation ----------
def kb_med_durations():
    kb = InlineKeyboardMarkup(row_width=4)
    buttons = [InlineKeyboardButton(f"{m} ‡∏ô‡∏≤‡∏ó‡∏µ", callback_data=f"med_dur:{m}") for m in (5,10,15,20,30,45,60)]
    kb.add(*buttons[:4]); kb.add(*buttons[4:])
    kb.add(InlineKeyboardButton("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á", callback_data="med_custom"))
    kb.add(InlineKeyboardButton("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", callback_data="med_cancel"))
    return kb

def kb_med_type():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("Guided", callback_data="med_type:guided"),
        InlineKeyboardButton("Unguided", callback_data="med_type:unguided")
    )
    kb.add(InlineKeyboardButton("‡∏≠‡∏∑‡πà‡∏ô‡πÜ", callback_data="med_type:other"))
    kb.add(InlineKeyboardButton("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", callback_data="med_cancel"))
    return kb

# ---------- Meditation flow ----------
# steps: med_duration -> med_type -> med_note -> save

@bot.message_handler(commands=["meditate", "meditation"])
def start_meditate(m):
    print(f"[DEBUG] start_meditate called from user={m.from_user.id} chat={m.chat.id}")
    ensure_med_csv_ready()
    uid = m.from_user.id
    STATE[uid] = {"step": "med_duration"}
    try:
        bot.send_message(
            m.chat.id,
            "üßò‚Äç‚ôÇÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏°‡∏≤‡∏ò‡∏¥ ‚Äî ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤",
            reply_markup=kb_med_durations()
        )
    except Exception as e:
        print(f"[ERROR] sending med durations keyboard: {e}")
        bot.send_message(m.chat.id, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° ‚Äî ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•")

@bot.callback_query_handler(func=lambda c: bool(getattr(c, "data", "") and getattr(c, "data", "").startswith(("med_dur:", "med_type:", "med_custom", "med_cancel"))))
def on_med_callback(c):
    print(f"[DEBUG] on_med_callback called user={c.from_user.id} data={getattr(c,'data',None)}")
    uid = c.from_user.id
    data = getattr(c, "data", "") or ""
    if data == "med_cancel":
        return cancel_flow(c)

    if data == "med_custom":
        STATE.setdefault(uid, {})["step"] = "med_custom_duration"
        try:
            return bot.edit_message_text("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ô‡∏≤‡∏ó‡∏µ) ‡πÄ‡∏ä‡πà‡∏ô 25", chat_id=c.message.chat.id, message_id=c.message.message_id)
        except Exception as e:
            print(f"[ERROR] edit_message_text med_custom: {e}")
            return

    if data.startswith("med_dur:"):
        try:
            val = int(data.split(":",1)[1])
        except Exception:
            print(f"[WARN] invalid med_dur value: {data}")
            return bot.answer_callback_query(c.id, "‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ú‡∏¥‡∏î")
        STATE.setdefault(uid, {})["duration_min"] = val
        STATE[uid]["step"] = "med_type"
        try:
            return bot.edit_message_text(f"‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: {val} ‡∏ô‡∏≤‡∏ó‡∏µ ‚úÖ\n\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡πà‡∏á‡∏™‡∏°‡∏≤‡∏ò‡∏¥", chat_id=c.message.chat.id, message_id=c.message.message_id, reply_markup=kb_med_type())
        except Exception as e:
            print(f"[ERROR] edit_message_text med_dur: {e}")
            return

    if data.startswith("med_type:"):
        typ = data.split(":",1)[1]
        STATE.setdefault(uid, {})["type"] = typ
        STATE[uid]["step"] = "med_note"
        try:
            return bot.edit_message_text("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏±‡πâ‡∏ô ‡πÜ (‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)", chat_id=c.message.chat.id, message_id=c.message.message_id)
        except Exception as e:
            print(f"[ERROR] edit_message_text med_type: {e}")
            return

@bot.message_handler(func=lambda msg: STATE.get(msg.from_user.id,{}).get("step") == "med_custom_duration", content_types=["text"])
def med_custom_duration(m):
    text = m.text.strip()
    if text == CANCEL_TEXT:
        return cancel_flow(m)
    try:
        minutes = int(float(text))
        if minutes <= 0:
            raise ValueError()
    except Exception:
        return bot.reply_to(m, "‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏ä‡πà‡∏ô 20 ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
    uid = m.from_user.id
    STATE.setdefault(uid, {})["duration_min"] = minutes
    STATE[uid]["step"] = "med_type"
    bot.send_message(m.chat.id, f"‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: {minutes} ‡∏ô‡∏≤‡∏ó‡∏µ ‚úÖ\n\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡πà‡∏á‡∏™‡∏°‡∏≤‡∏ò‡∏¥", reply_markup=kb_med_type())

@bot.message_handler(func=lambda msg: STATE.get(msg.from_user.id,{}).get("step") == "med_note", content_types=["text"])
def med_note_step(m):
    if m.text.strip() == CANCEL_TEXT:
        return cancel_flow(m)
    uid = m.from_user.id
    STATE[uid]["note"] = m.text.strip() if m.text.strip() != "-" else ""
    data = STATE.get(uid, {})
    row = {
        "timestamp_iso": now_local().isoformat(timespec="seconds"),
        "user_id": uid,
        "username": username_from(m),
        "chat_id": m.chat.id,
        "duration_min": int(data.get("duration_min", 0)),
        "type": data.get("type",""),
        "note": data.get("note","")
    }
    save_med_row(row)
    bot.send_message(
        m.chat.id,
        "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏°‡∏≤‡∏ò‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n"
        f"‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤: {row['duration_min']} ‡∏ô‡∏≤‡∏ó‡∏µ\n"
        f"‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {row['type'] or '-'}\n"
        f"‚Ä¢ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {row['note'] or '-'}"
    )
    STATE.pop(uid, None)

# ---------- Meditation summaries ----------
@bot.message_handler(commands=["meds_today", "med_summarize"])
def handle_meds_today(m):
    bot.send_message(m.chat.id, summarize_meds_today(m.chat.id))

@bot.message_handler(commands=["export"])
def handle_export(m):
    """‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞ meditations.csv (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"""
    ensure_csv_ready()
    ensure_med_csv_ready()

    files_to_send = [CSV_PATH, MEDITATION_CSV_PATH]
    sent_any = False

    for path in files_to_send:
        print(f"[DEBUG] export requested by user={m.from_user.id} file={path}")
        if not os.path.exists(path):
            print(f"[DEBUG] file not found: {path}")
            continue
        try:
            with open(path, "rb") as f:
                bot.send_document(m.chat.id, f, caption=f"Export: {os.path.basename(path)}")
                sent_any = True
        except Exception as e:
            print(f"[ERROR] export failed for {path}: {e}")
            bot.reply_to(m, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå {os.path.basename(path)}: {e}")

    if not sent_any:
        bot.reply_to(m, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå CSV ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á")

@bot.message_handler(commands=["export_meds", "export_meditations"])
def handle_export_meds(m):
    """‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå meditations.csv"""
    ensure_med_csv_ready()
    path = MEDITATION_CSV_PATH
    print(f"[DEBUG] export_meds requested by user={m.from_user.id} file={path}")
    if not os.path.exists(path):
        return bot.reply_to(m, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏°‡∏≤‡∏ò‡∏¥‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á")
    try:
        with open(path, "rb") as f:
            bot.send_document(m.chat.id, f, caption=f"Export: {os.path.basename(path)}")
    except Exception as e:
        print(f"[ERROR] export_meds failed: {e}")
        bot.reply_to(m, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå: {e}")

# ---------- Subscribers ----------
# ‡πÄ‡∏û‡∏¥‡πà‡∏° handlers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö subscribe / unsubscribe
@bot.message_handler(commands=["subscribe_daily"])
def handle_subscribe_daily(m):
    chat_id = m.chat.id
    subs = load_subs()
    if chat_id in subs:
        bot.reply_to(m, "‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", reply_markup=main_reply_kb())
    else:
        subs.append(chat_id)
        save_subs(subs)
        bot.reply_to(m, "‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", reply_markup=main_reply_kb())
    bot.send_message(chat_id, f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {len(subs)}", reply_markup=main_reply_kb())

@bot.message_handler(commands=["unsubscribe"])
def handle_unsubscribe(m):
    chat_id = m.chat.id
    subs = load_subs()
    if chat_id not in subs:
        bot.reply_to(m, "‚ÑπÔ∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏¢‡∏π‡πà", reply_markup=main_reply_kb())
    else:
        subs = [s for s in subs if s != chat_id]
        save_subs(subs)
        bot.reply_to(m, "‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", reply_markup=main_reply_kb())
    bot.send_message(chat_id, f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {len(subs)}", reply_markup=main_reply_kb())

@bot.message_handler(func=lambda m: isinstance(m.text, str) and not m.text.startswith("/") and STATE.get(m.from_user.id, {}).get("step") is None, content_types=["text"])
def handle_non_command_text(m):
    """
    ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô flow ‡πÉ‡∏î ‡πÜ
    ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢
    """
    try:
        cmds = (
            "/log  /meditation  /today  /weekly  /monthly\n"
            "/subscribe_daily  /unsubscribe  /undo  /export  /export_meds\n"
            "‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
        )
        reply = (
            f"‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¥‡∏°‡∏û‡πå: {m.text}\n\n"
            "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢:\n"
            f"{cmds}"
        )
        bot.reply_to(m, reply, reply_markup=main_reply_kb())
    except Exception as e:
        print(f"[ERROR] handle_non_command_text: {e}")

def _compute_summary_from_rows(rows: List[Dict[str,str]], start: dt.date, end: dt.date) -> Tuple[int, float, float, List[Tuple[str,int]], List[str]]:
    if not rows:
        return 0, 0.0, 0.0, [], []
    count = len(rows)
    diss_vals = [int(float(r.get("dissatisfaction_score",0))) for r in rows if r.get("dissatisfaction_score","")!="-"]
    react_vals = [int(float(r.get("reaction_score",0))) for r in rows if r.get("reaction_score","")!="-"]
    avg_diss = (sum(diss_vals)/len(diss_vals)) if diss_vals else 0.0
    avg_react = (sum(react_vals)/len(react_vals)) if react_vals else 0.0
    tags = [r.get("tag","-") for r in rows]
    top_tags = Counter(tags).most_common(3)
    samples = [r.get("event_desc","-") for r in rows][:3]
    return count, avg_diss, avg_react, top_tags, samples

def summarize_with_comparison(chat_id: int, start: dt.date, end_inclusive: dt.date) -> str:
    rows = event_rows_for_chat_between(chat_id, start, end_inclusive)
    count, avg_diss, avg_react, top_tags, samples = _compute_summary_from_rows(rows, start, end_inclusive)
    # previous period
    span_days = (end_inclusive - start).days + 1
    prev_end = start - dt.timedelta(days=1)
    prev_start = prev_end - dt.timedelta(days=span_days-1)
    prev_rows = event_rows_for_chat_between(chat_id, prev_start, prev_end)
    p_count, p_avg_diss, p_avg_react, _, _ = _compute_summary_from_rows(prev_rows, prev_start, prev_end)

    def pct_change(current, prev):
        try:
            if prev == 0:
                return "‚Äî"
            return f"{(current - prev)/prev*100:.0f}%"
        except Exception:
            return "‚Äî"

    if not rows:
        return f"üìã <b>‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå</b> ({start.isoformat()}" + (f" - {end_inclusive.isoformat()}" if start != end_inclusive else "") + ")\n‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö"

    top_tags_str = ", ".join(f"{t} ({c})" for t,c in top_tags) or "-"
    samples_str = "\n".join(f"‚Ä¢ {s}" for s in samples) if samples else ""

    return (
        f"üìã <b>‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå</b> ({start.isoformat()}"
        + (f" - {end_inclusive.isoformat()}" if start != end_inclusive else "")
        + ")\n"
        f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {count} (‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤: {p_count} | ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô: {pct_change(count,p_count)})\n"
        f"‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à (avg): {avg_diss:.1f}/10 (‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤: {p_avg_diss:.1f} | ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô: {pct_change(avg_diss,p_avg_diss)})\n"
        f"React (avg): {avg_react:.1f}/10 (‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤: {p_avg_react:.1f} | ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô: {pct_change(avg_react,p_avg_react)})\n"
        f"‡πÅ‡∏ó‡πá‡∏Å‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°: {top_tags_str}\n\n"
        f"‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå:\n{samples_str}\n\n"
        "‡∏õ‡∏∏‡πà‡∏°: ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î | ‡∏™‡πà‡∏á CSV | ‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡∏™‡∏±‡πâ‡∏ô"
    )

@bot.message_handler(commands=["today"])
def handle_today(m):
    today = now_local().date()
    bot.send_message(m.chat.id, summarize_with_comparison(m.chat.id, today, today))

@bot.message_handler(commands=["weekly"])
def handle_weekly(m):
    today = now_local().date()
    start = today - dt.timedelta(days=6)
    bot.send_message(m.chat.id, summarize_with_comparison(m.chat.id, start, today))

@bot.message_handler(commands=["monthly"])
def handle_monthly(m):
    today = now_local().date()
    start = today - dt.timedelta(days=29)
    bot.send_message(m.chat.id, summarize_with_comparison(m.chat.id, start, today))

def event_rows_for_chat_between(chat_id: int, start: dt.date, end_inclusive: dt.date) -> List[Dict[str,str]]:
    """‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå (‡∏à‡∏≤‡∏Å CSV) ‡∏Ç‡∏≠‡∏á chat_id ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà start..end_inclusive"""
    res = []
    for row in load_rows():
        if str(chat_id) != str(row.get("chat_id", "")):
            continue
        ts_str = row.get("timestamp_iso", "")
        try:
            ts = dt.datetime.fromisoformat(ts_str)
        except Exception:
            # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            try:
                ts = dt.datetime.strptime(ts_str, "%Y-%m-%dT%H:%M:%S")
            except Exception:
                continue
        d = ts.date()
        if start <= d <= end_inclusive:
            res.append(row)
    return res

# ---------- Reflection AI ----------
def kb_reflection_actions() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("üîÅ ‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà", callback_data="ai_reflect_again"),
        InlineKeyboardButton("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", callback_data="ai_reflect_save")
    )
    kb.add(InlineKeyboardButton("‚ùå ‡∏õ‡∏¥‡∏î", callback_data="ai_reflect_close"))
    return kb

def format_reflection_ui(text: str) -> str:
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏à‡∏≤‡∏Å AI / fallback) ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ (plain text)
    - ‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ / bullets
    - ‡πÉ‡∏™‡πà header ‡πÅ‡∏•‡∏∞ emoji ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏ö‡∏≤‡∏¢‡∏ï‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ HTML/Markdown)
    """
    lines = [ln.strip() for ln in text.strip().splitlines() if ln.strip()]
    header = "üßò‚Äç‚ôÇÔ∏è ‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå\n\n"
    body_lines = []
    for ln in lines:
        if ln.startswith(("‚Ä¢", "-", "‚Ä¢ ")) or ln.startswith("‚Ä¢"):
            clean = ln.lstrip("‚Ä¢- ").strip()
            body_lines.append(f"‚Ä¢ {clean}")
        elif ln.lower().startswith("‡∏´‡∏•‡∏±‡∏Å‡∏ò‡∏£‡∏£‡∏°") or ln.startswith("‡∏´‡∏•‡∏±‡∏Å‡∏ò‡∏£‡∏£‡∏°"):
            # ‡∏´‡∏•‡∏±‡∏Å‡∏ò‡∏£‡∏£‡∏°: ...  -> ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
            if ":" in ln:
                body_lines.append("üìú ‡∏´‡∏•‡∏±‡∏Å‡∏ò‡∏£‡∏£‡∏°:")
                body_lines.append(ln.split(":",1)[1].strip())
            else:
                body_lines.append(f"üìú {ln}")
        elif ln.lower().startswith("‡πÅ‡∏ô‡∏ß‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥") or ln.startswith("‡πÅ‡∏ô‡∏ß‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥"):
            if ":" in ln:
                body_lines.append("üõ†Ô∏è ‡πÅ‡∏ô‡∏ß‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥:")
                body_lines.extend([f"‚Ä¢ {s.strip()}" for s in ln.split(":",1)[1].splitlines() if s.strip()])
            else:
                body_lines.append(f"üõ†Ô∏è {ln}")
        else:
            body_lines.append(ln)
    body = "\n".join(body_lines)
    footer = '\n\n‡∏Å‡∏î "‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡∏Å‡∏ä‡∏∏‡∏î ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ'
    return header + body + footer

# ‡πÄ‡∏Å‡πá‡∏ö input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°)
# ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡πÉ‡∏ô on_confirm_flow: ‡πÄ‡∏Å‡πá‡∏ö last_reflection_input ‡πÉ‡∏ô STATE ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å gemini_reflection

@bot.callback_query_handler(func=lambda c: c.data in ("ai_reflect_again","ai_reflect_save","ai_reflect_close"))
def on_ai_reflect_actions(c):
    uid = c.from_user.id
    data = c.data
    if data == "ai_reflect_close":
        try:
            return bot.edit_message_reply_markup(chat_id=c.message.chat.id, message_id=c.message.message_id, reply_markup=None)
        except Exception:
            return bot.answer_callback_query(c.id, "‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß")
    if data == "ai_reflect_save":
        # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏±‡πâ‡∏ô: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå reflections.txt
        last = STATE.get(uid, {}).get("last_reflection_text")
        if not last:
            bot.answer_callback_query(c.id, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
            return
        try:
            with open("reflections.txt", "a", encoding="utf-8") as f:
                f.write(f"{dt.datetime.now(TZ).isoformat()} | user:{uid}\n{last}\n---\n")
            bot.answer_callback_query(c.id, "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")
            # ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            bot.edit_message_reply_markup(chat_id=c.message.chat.id, message_id=c.message.message_id, reply_markup=None)
        except Exception as e:
            bot.answer_callback_query(c.id, f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {e}")
        return
    if data == "ai_reflect_again":
        # ‡∏î‡∏∂‡∏á input ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å STATE ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏Å gemini_reflection ‡πÉ‡∏´‡∏°‡πà
        inp = STATE.get(uid, {}).get("last_reflection_input")
        if not inp:
            bot.answer_callback_query(c.id, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà")
            return
        bot.answer_callback_query(c.id, "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‚Ä¶")
        try:
            advice = gemini_reflection(
                event=inp.get("event",""),
                diss_score=int(inp.get("diss_score",0)),
                diss_reason=inp.get("diss_reason",""),
                react_desc=inp.get("react_desc",""),
                react_score=int(inp.get("react_score",0))
            )
        except Exception as e:
            advice = "(AI) ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà ‚Äî ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏£‡∏≠‡∏á"
        STATE.setdefault(uid, {})["last_reflection_text"] = advice
        ui = format_reflection_ui(advice)
        try:
            bot.edit_message_text(ui, chat_id=c.message.chat.id, message_id=c.message.message_id, reply_markup=kb_reflection_actions())
        except Exception:
            # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
            bot.send_message(c.message.chat.id, ui, reply_markup=kb_reflection_actions())

if __name__ == "__main__":
    # ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå CSV/med CSV
    init_csv_if_needed()
    ensure_med_csv_ready()

    # If SKIP_TELEGRAM is enabled, run in offline/dev mode (no Telegram API calls)
    if SKIP_TELEGRAM:
        print("[INFO] SKIP_TELEGRAM enabled ‚Äî not contacting Telegram API. Running in offline/dev mode.")
        print("[INFO] You can still exercise non-Telegram code paths or run tests. Exiting main loop.")
        # Keep process alive for manual testing if desired, otherwise exit
        # Here we exit with 0 to indicate successful startup in dev mode
        raise SystemExit(0)

    # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡∏∑‡∏°‡∏ï‡∏±‡πâ‡∏á BOT_TOKEN (runtime check)
    if BOT_TOKEN.startswith("PUT_YOUR_TOKEN") or not BOT_TOKEN.strip():
        print("[ERROR] BOT_TOKEN ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô .env ‡πÅ‡∏•‡πâ‡∏ß restart")
        raise SystemExit(1)
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á token ‡∏Å‡∏±‡∏ö Telegram ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß
    try:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å get_me() ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤ token ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        me = bot.get_me()
    except Exception as e:
        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (401)
        err_text = str(e)
        if '401' in err_text or 'Unauthorized' in err_text or 'unauthorized' in err_text:
            print("[ERROR] Telegram API authorization failed (401 Unauthorized).\nPlease verify your BOT_TOKEN in the environment (.env) is the bot token from @BotFather and not empty.")
            print(f"[ERROR] Detailed error: {e}")
            raise SystemExit(1)
        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢ exit
        print(f"[ERROR] Failed to contact Telegram API with get_me(): {e}")
        raise SystemExit(1)

    # ‡πÄ‡∏£‡∏¥‡πà‡∏° scheduler (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ job) ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° polling ‡∏Ç‡∏≠‡∏á Telegram bot
    scheduler = BackgroundScheduler(timezone=TZ)
    scheduler.start()
    print(f"[INFO] Starting Sati bot... GENAI_OK={GENAI_OK} GENAI_CLIENT={'present' if GENAI_CLIENT else 'none'} BOT_USER={getattr(me,'username', '<unknown>')}")

    try:
        # ‡πÉ‡∏ä‡πâ infinity_polling ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏•‡∏≠‡∏î
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
    except KeyboardInterrupt:
        print("[INFO] Shutdown requested (KeyboardInterrupt)")
    except Exception as e:
        # ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î API ‡πÅ‡∏ö‡∏ö Unauthorized ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å
        err_text = str(e)
        if '401' in err_text or 'Unauthorized' in err_text or 'unauthorized' in err_text:
            print("[ERROR] Telegram API returned 401 Unauthorized while polling. This usually means the BOT_TOKEN is invalid or revoked.\nCheck the token in your .env (BOT_TOKEN) and regenerate it from @BotFather if needed.")
            print(f"[ERROR] Detailed error: {e}")
            raise SystemExit(1)
        print(f"[ERROR] polling failed: {e}")
    finally:
        try:
            scheduler.shutdown(wait=False)
        except Exception:
            pass